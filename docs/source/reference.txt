===============================================================================
Authorship:
===============================================================================

### placed below page title
:Author: James D. Triveri
:Release: 0.1

===============================================================================
Highlighting:
===============================================================================
.. highlight:: none
.. highlight:: python
.. highlight:: c

### also, use the `code-block` specifier:

.. code-block:: python


===============================================================================
Images:
===============================================================================

.. image:: ./images/CNA-logo.gif
    :align: right
    :width: 217px
    :height: 144px
    :alt: alternate text

===============================================================================
Links:
===============================================================================

### html links (text inside '``' before "<http:" will be the hyperlink):

managed with `Subversion <http://svnbook.red-bean.com/en/1.6/svn.intro.whatis.html>`_.
`vim <http://www.vim.org/about.php>`_
`Emacs <http://www.gnu.org/software/emacs/>`_


### interdocumentation links:

Please refer to the :ref:`Main Page <index>`
:ref:`Creating a Working Environment <workenv>`
:ref:`Scoring Program Functions<functions>`

===============================================================================
Link to download files:
===============================================================================

:download:`get source <./other_docs/download/BASE_LC.R>`
:download:`get source <./other_docs/download/BASE_LC.txt>`

===============================================================================
Include file contents in webpage:
===============================================================================

### reads and displays file conetents:

.. literalinclude:: ./other_docs/src/config_example.txt
    :encoding: latin-1




===============================================================================
List Table
===============================================================================

.. list-table::
    :widths: 10 100
    :header-rows: 1

    * - Mode
      - Description
    * - 'r'
      - open for reading (default)
    * - 'w'
      - open for writing, truncating the file first
    * - 'a'
      - open for writing, appending to the end of the file if it exists
    * - 'b'
      - binary mode
    * - 't'
      - text mode (default)
    * - '+'
      - open a file for reading and writing ('r+w')


===============================================================================
Issuing Warnings
===============================================================================
.. warning::

    The ``./`` preceeding ``main`` **is required!**


.. note:: If asterisks or backquotes appear in running text and could be confused with inline markup delimiters, they have to be escaped with a backslash.

.. todo:: A todo box

===============================================================================



*****************
Quick Start Guide
*****************

:Author: James D. Triveri
:Release: 0.1



This Quick Start Guide covers the initial setup of a working environment,
and is intended to assist with creating an output dataset as quickly as
possible. Keep in mind that the implementation of the Interim Pricing Solution
is a large project with a high degree of configurability, especially with
respect to output directives. Please refer to the :ref:`Main Page <index>`
for further details. If anything in this documentation or your working
environment is found to be in error, please contact James Triveri
(James.Triveri@cna.com) or J. Christensen (Joseph.Christensen@cna.com).

.. _workenv:


Creating a Working Environment
------------------------------

The Functional Implementation of the Interim Pricing Solution is managed with
`Subversion <http://svnbook.red-bean.com/en/1.6/svn.intro.whatis.html>`_.
Essentially, Subversion tracks and archives the entire history of a project,
providing developers with the ability to revert to any previous state of
the project (there are many other benefits, refer to the link for details).

An additional benefit of managing projects with Subversion is that
each user is able to create their own copy of the project in an isolated
environment. This encourages the end user to explore source files
and experiment with the application in a manner that would be prohibitive
with a single master set of source files that everyone accesses.

To create an independent, private working copy of the Interim Pricing
Solution project, first open Cygwin and login to **lrau1p11.cna.com**. For
this example, assume the user's CID is ``abc1234``::

    $ ssh -p 2245 abc1234@lrau1p11.cna.com


Once logged in, you will most likely be placed in your home directory, or
in the case of our example, ``/home/abc1234``. To verify::

    $ pwd
    #returns:
    #/home/abc1234

If anything other than /home/<CID> is displayed in response to pwd,
simply enter the following at the terminal::

    $ cd ~


Which is a shortcut to take the user to his or her home directory.
Next, it is necessary to create a directory to store our working copy of the
project. We're going to name the directory ``dev``::

    $ mkdir dev

Change directory into the ``dev`` folder. Similiar to how we navigated
to our home directory previously, enter::

    $ cd dev

From ``dev``, run the following::

    $ svn export file:///SAS/commercial/connect/Interim/trunk Interim

This command requires some explanation:

:svn:
      The command-line equivalent of *Subversion*.

:export:
      Tells Subversion to export the current state of the project,
      and disassociate the tracked project history.

:file:
      Specifies the location of the project repository source files.

:Interim:
    The name of the folder in which the project source files will be stored.



The working copy will now be located in */home/CID/dev/Interim*. Change
directory into 'Interim', then run ``ls -l`` to list the directory contents::

    $ cd Interim
    $ ls -lF

    #returns:
    #CONTROL_FILES/
    #INPUT_DATA/
    #main
    #README
    #SOURCE/

Note that items listed with a trailing ``/`` are directories.

|

After creating a working copy, it is necessary to execute a one-time setup
script that runs a handful of housekeeping routines and creates the
``config`` file. Verify that you are in the *Interim* directory, then run::

    $ ./main --setup


.. warning::

    The ``./`` preceeding ``main`` **is required!** Without it, a
    ``-bash: main: command not found`` error will be thrown.
    For more information, check out `this section <http://tldp.org/LDP/abs/html/invoking.html#AEN327>`_
    of *The Advanced Bash Scripting Guide*.


If you attempt to run ``./main`` without first running ``./main --setup``,
the following exception will be output to the terminal::

    #running ./main prior to running ./main --setup:
    $ ./main
    config file must be created prior to executing main...
    From the terminal, run:

                    ./main --setup

    which creates `config` in your top level directory.

:ref:`Scoring Program Functions<functions>`

Generating an Output Dataset
------------------------------

Once a working copy has been setup and initialized, it's straightforward to generate an output dataset.
After setting your configuration file in accordance with the desired output medium and format, simply
execute the main script without arguments. See :ref:`Configuration Details<config>` for more information.

Example
--------

Assume we want to produce a Location Level dataset output as both a delimited data file
as well as an Oracle table. The name of the table we want to output the data to is ``SAMPLE_LOCATION_TABLE``,
located in database ``DB`` and schema ``SCHEMA``, and we'd like to overwrite the table if it exists.
The config file should look like this:

.. literalinclude:: ./other_docs/src/config_example.txt
    :encoding: latin-1


After kicking off ``main``, if it doesn't exist already, an ``OUTPUT`` directory will be created
in the top-level of your working copy, and within it, a date-and-time-stamped directory
will contain the output from your session. The naming convention for directories within ``OUTPUT``
will follow::

    DD-MMM-YYYY_HH.MM.SS[AM/PM]

And will look like::

    04-Apr-2016_09.45.48AM


If ``LOCATION_LEVEL=Y``, the delimited file will be named::

    location_level_consolidated_output.csv

If ``POLICY_LEVEL=Y``, the delimited file will be named::

    policy_level_consolidated_output.csv



================================================================================
Substitutions:
================================================================================

Replacement text
The substitution mechanism may be used for simple macro substitution. This may 
be appropriate when the replacement text is repeated many times throughout one 
or more documents, especially if it may need to change later. A short example 
is unavoidably contrived:

    |RST|_ is a little annoying to type over and over, especially
    when writing about |RST| itself, and spelling out the
    bicapitalized word |RST| every time isn't really necessary for
    |RST| source readability.

.. |RST| replace:: reStructuredText
.. _RST: http://docutils.sourceforge.net/rst.html


Note the trailing underscore in the first use of a substitution reference. This 
indicates a reference to the corresponding hyperlink target.


But still, that's nothing compared to a name like
|j2ee-cas|__.

.. |j2ee-cas| replace::
   the Java `TM`:super: 2 Platform, Enterprise Edition Client
   Access Services
__ http://developer.java.sun.com/developer/earlyAccess/
   j2eecas/

